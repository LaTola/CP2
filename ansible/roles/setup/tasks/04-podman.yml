---
- ansible.builtin.include_tasks: "ACR_login.yml"

- name: Podman Containerfile template
  ansible.builtin.template:
    src: "vm_containerfile.j2"
    dest: "{{ base_config_dir }}/Containerfile"

- name: Creacion de la imagen web de podman
  containers.podman.podman_image:
    name: "{{ web_name }}"
    path: "{{ base_config_dir }}"
    push: true
    push_args:
      dest: "{{ acrcp2_url }}"
      remove_signatures: true
  become: true
  become_user: root
  become_method: sudo

- name: Ejecucion
  containers.podman.podman_container:
    name: "{{ web_name }}"
    image: "{{ acrcp2_url }}/{{ web_name }}"
    recreate: yes
    ports:
      - "443:443/tcp"
    state: started
  become: true
  become_user: root
  become_method: sudo
  register: container

- name: Unit file para el webserver
  containers.podman.podman_generate_systemd:
    name: "{{ container.container.Id }}"
    dest: "{{ systemd_unit_path }}"
  become: true
  become_user: root
  become_method: sudo

- name: Se reinicia el contenedor via systemd
  systemd:
    name: "container-{{ web_name }}"
    daemon_reload: yes
    state: restarted
    enabled: yes
  become: true
  become_user: root
  become_method: sudo

- name: Chequeo si es necesario un reboot de la vm
  stat:
    path: /var/run/reboot-required
  register: reboot

- debug:
    msg: "Reboot required"
  when: reboot.stat.exists

- name: Reinicio de la vm
  reboot: 
    reboot_timeout: 3600
  when: reboot.stat.exists
  become: true
  become_user: root
  become_method: sudo

- name: Chequeo de la aplicacion nginx
  ansible.builtin.uri:
    method: GET
    url: "https://{{ ansible_host }}/"
    user: "{{ nginx_basic_user }}"
    password: "{{ nginx_user_password }}"
    force_basic_auth: true
    validate_certs: no
    return_content: true
  register: httpsresult

- name: La aplicacion de nginx no responde
  any_errors_fatal: true
  fail:
      msg: 'El servicio de nginx no responde'
  when: 
    - httpsresult.status != 200